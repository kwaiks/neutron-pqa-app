[{"/Users/macbook/Desktop/project/neutron/web/src/index.tsx":"1","/Users/macbook/Desktop/project/neutron/web/src/store/index.ts":"2","/Users/macbook/Desktop/project/neutron/web/src/store/constants/actionTypes.ts":"3","/Users/macbook/Desktop/project/neutron/web/src/views/LoggingHistory.tsx":"4","/Users/macbook/Desktop/project/neutron/web/src/components/Header.tsx":"5","/Users/macbook/Desktop/project/neutron/web/src/store/reducers/meter.ts":"6","/Users/macbook/Desktop/project/neutron/web/src/layouts/AppLayout.tsx":"7","/Users/macbook/Desktop/project/neutron/web/src/store/reducers/settings.ts":"8","/Users/macbook/Desktop/project/neutron/web/src/App.tsx":"9","/Users/macbook/Desktop/project/neutron/web/src/views/Meter.tsx":"10","/Users/macbook/Desktop/project/neutron/web/src/utils/meterUnit.ts":"11","/Users/macbook/Desktop/project/neutron/web/src/views/Logging.tsx":"12","/Users/macbook/Desktop/project/neutron/web/src/views/Power.tsx":"13","/Users/macbook/Desktop/project/neutron/web/src/views/Home.tsx":"14","/Users/macbook/Desktop/project/neutron/web/src/store/history.ts":"15","/Users/macbook/Desktop/project/neutron/web/src/views/Settings.tsx":"16","/Users/macbook/Desktop/project/neutron/web/src/utils/constants.ts":"17","/Users/macbook/Desktop/project/neutron/web/src/components/PhasorDiagram.tsx":"18","/Users/macbook/Desktop/project/neutron/web/src/store/middleware.ts":"19","/Users/macbook/Desktop/project/neutron/web/src/utils/convertDate.ts":"20","/Users/macbook/Desktop/project/neutron/web/src/components/UnitContainer.tsx":"21","/Users/macbook/Desktop/project/neutron/web/src/utils/drawPhasorLine.ts":"22"},{"size":521,"mtime":1610590435762,"results":"23","hashOfConfig":"24"},{"size":896,"mtime":1610499726552,"results":"25","hashOfConfig":"24"},{"size":79,"mtime":1610499323379,"results":"26","hashOfConfig":"24"},{"size":39151,"mtime":1610603280326,"results":"27","hashOfConfig":"24"},{"size":862,"mtime":1610510484275,"results":"28","hashOfConfig":"24"},{"size":3361,"mtime":1610530095232,"results":"29","hashOfConfig":"24"},{"size":292,"mtime":1610502020793,"results":"30","hashOfConfig":"24"},{"size":377,"mtime":1610505688434,"results":"31","hashOfConfig":"24"},{"size":2071,"mtime":1610603405734,"results":"32","hashOfConfig":"24"},{"size":25724,"mtime":1610510329306,"results":"33","hashOfConfig":"24"},{"size":2808,"mtime":1610500740660,"results":"34","hashOfConfig":"24"},{"size":10305,"mtime":1610591425434,"results":"35","hashOfConfig":"24"},{"size":7543,"mtime":1610510427318,"results":"36","hashOfConfig":"24"},{"size":11060,"mtime":1610589272229,"results":"37","hashOfConfig":"24"},{"size":95,"mtime":1610472063324,"results":"38","hashOfConfig":"24"},{"size":5262,"mtime":1610510558314,"results":"39","hashOfConfig":"24"},{"size":7147,"mtime":1610603209141,"results":"40","hashOfConfig":"24"},{"size":1477,"mtime":1610502076411,"results":"41","hashOfConfig":"24"},{"size":337,"mtime":1610499708891,"results":"42","hashOfConfig":"24"},{"size":525,"mtime":1610500792118,"results":"43","hashOfConfig":"24"},{"size":457,"mtime":1610502058563,"results":"44","hashOfConfig":"24"},{"size":1014,"mtime":1610500771948,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1vslefg",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/macbook/Desktop/project/neutron/web/src/index.tsx",[],["97","98"],"/Users/macbook/Desktop/project/neutron/web/src/store/index.ts",[],["99","100"],"/Users/macbook/Desktop/project/neutron/web/src/store/constants/actionTypes.ts",[],["101","102"],"/Users/macbook/Desktop/project/neutron/web/src/views/LoggingHistory.tsx",["103"],"import React, {useState, useEffect} from 'react';\nimport {\n    Row,\n    Col,\n    Card,\n    Form,\n    Tab,\n    Nav,\n    Button\n} from 'react-bootstrap';\nimport {Line} from 'react-chartjs-2';\nimport axios from 'axios';\nimport {CSVLink} from 'react-csv';\nimport DatePicker from 'react-datepicker';\nimport 'chartjs-plugin-zoom';\nimport \"hammerjs\";\nimport {ChartOptionsList} from '../utils/constants';\nimport Loader from 'react-loader-spinner';\n\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nexport default function LoggingHistory(props:any) {\n    const { id } = props.match.params;\n    const [loaded, setLoaded] = useState(false);\n    const [detail, setDetail] = useState({\n        lh_name: \"\",\n        lh_interval: 0,\n        lh_duration: 0,\n        lh_start_time: new Date(),\n        lh_end_time: new Date()\n    });\n    const [dataSrc, setDataSrc] = useState<any>([]);\n    const [chartDataVolt, setChartDataVolt] = useState<any>(null);\n    const [chartDataAmp, setChartDataAmp] = useState<any>(null);\n    const [chartDataPwr, setChartDataPwr] = useState<any>(null);\n\n    const [timeRangeSet, setTimeRangeSet] = useState(false);\n    const [timeRangeOption, setTimeRangeOption] = useState(false);\n    const [selectedOptions, setSelectedOptions] = useState<string[]>([]);\n    const [startDate, setStartDate] = useState<Date>(new Date());\n    const [endDate, setEndDate] = useState<Date>(new Date());\n    const [dateRange, setDateRange] = useState({minDate: new Date(), maxDate: new Date()});\n\n    useEffect(() => {\n        const changeChartData = () => {\n            let dataSource = dataSrc;\n            if(timeRangeOption){\n                dataSource = dataSrc.filter((data:any)=>new Date(data.time) >= startDate && new Date(data.time) <= endDate);\n            }\n            if(dataSrc.length > 0){\n                let dataSets:any[] = [];\n                let currDataSet;\n                let dataChart;\n    \n                const labels = dataSource.map((o:any)=>o.time.replace('T',\" \")\n                                .substring(0,19));\n                // Volt\n                const voltOptions = selectedOptions.filter((item:string) => item.includes(\"volt\"));\n                voltOptions.forEach((data:string)=>{\n                    currDataSet = dataSource.map((item:any)=>item[data]);\n                    const {dataSet}= ChartOptionsList[data];\n                    dataSet.data = currDataSet;\n                    dataSets.push(dataSet);\n                })\n                dataChart = {\n                    labels,\n                    datasets: dataSets\n                }\n                setChartDataVolt({\n                    data:dataChart,\n                    options: {\n                        scales: {\n                            yAxes: [{\n                                display: true,\n                                    scaleLabel: {\n                                    display: true,\n                                    labelString: 'Volt (V)'\n                                },\n                                ticks: {\n                                    min: 100,\n                                    max: 300,\n                                    stepSize: 10\n                                }\n                            }],\n                            xAxes: [{\n                                ticks: {\n                                    autoSkip: true,\n                                    maxTicksLimit: 5\n                                }\n                            }]\n                        },\n                        legend: {\n                            position: 'bottom'\n                        },\n                        zoom: {\n                            enabled: true,\n                            mode: 'x',\n                            speed: 1000,\n                            sensitivity: 0.1,\n                            threshold: 2,\n                            rangeMin: {\n                                x: 200,\n                                y: 200\n                            },\n                            rangeMax: {\n                                x: 200,\n                                y: 200\n                            },\n                        },\n                        pan: {\n                            enabled: true,\n                            mode: 'x',\n                            rangeMin: {\n                                x: 200,\n                                y: 200\n                            },\n                            rangeMax: {\n                                // Format of min pan range depends on scale type\n                                x: 200,\n                                y: 200\n                            },\n                        },\n                    }\n                });\n    \n                // Ampere\n                dataSets = [];\n                const ampOptions = selectedOptions.filter((item:string) => item.includes(\"curr\"));\n                ampOptions.forEach((data:string)=>{\n                    currDataSet = dataSource.map((item:any)=>item[data]);\n                    const {dataSet}= ChartOptionsList[data];\n                    dataSet.data = currDataSet;\n                    dataSets.push(dataSet);\n                });\n                dataChart = {\n                    labels,\n                    datasets: dataSets\n                }\n                setChartDataAmp({\n                    data:dataChart,\n                    options: {\n                        scales: {\n                            yAxes: [{\n                                display: true,\n                                    scaleLabel: {\n                                    display: true,\n                                    labelString: 'Current (A)'\n                                },\n                            }],\n                            xAxes: [{\n                                ticks: {\n                                    autoSkip: true,\n                                    maxTicksLimit: 5\n                                }\n                            }]\n                        },\n                        legend: {\n                            position: 'bottom'\n                        },\n                        zoom: {\n                            enabled: true,\n                            mode: 'x',\n                            speed: 1000,\n                            sensitivity: 0.1,\n                            threshold: 2,\n                            rangeMin: {\n                                x: 200,\n                                y: 200\n                            },\n                            rangeMax: {\n                                x: 200,\n                                y: 200\n                            },\n                        },\n                        pan: {\n                            enabled: true,\n                            mode: 'x',\n                            rangeMin: {\n                                x: 200,\n                                y: 200\n                            },\n                            rangeMax: {\n                                // Format of min pan range depends on scale type\n                                x: 200,\n                                y: 200\n                            },\n                        },\n                    }\n                });\n    \n                // Power\n                dataSets = [];\n                const pwrOptions = selectedOptions.filter((item:string) => item.includes(\"act\"));\n                pwrOptions.forEach((data:string)=>{\n                    currDataSet = dataSource.map((item:any)=>item[data]);\n                    const {dataSet}= ChartOptionsList[data];\n                    dataSet.data = currDataSet;\n                    dataSets.push(dataSet);\n                });\n                dataChart = {\n                    labels,\n                    datasets: dataSets\n                }\n                setChartDataPwr({\n                    data:dataChart,\n                    options: {\n                        scales: {\n                            yAxes: [{\n                                display: true,\n                                    scaleLabel: {\n                                    display: true,\n                                    labelString: 'Active Power (Wh)'\n                                },\n                            }],\n                            xAxes: [{\n                                ticks: {\n                                    autoSkip: true,\n                                    maxTicksLimit: 5\n                                }\n                            }]\n                        },\n                        legend: {\n                            position: 'bottom'\n                        },\n                        zoom: {\n                            enabled: true,\n                            mode: 'x',\n                            speed: 1000,\n                            sensitivity: 0.1,\n                            threshold: 2,\n                            rangeMin: {\n                                x: 200,\n                                y: 200\n                            },\n                            rangeMax: {\n                                x: 200,\n                                y: 200\n                            },\n                        },\n                        pan: {\n                            enabled: true,\n                            mode: 'x',\n                            rangeMin: {\n                                x: 200,\n                                y: 200\n                            },\n                            rangeMax: {\n                                // Format of min pan range depends on scale type\n                                x: 200,\n                                y: 200\n                            },\n                        },\n                    }\n                });\n            }\n        }\n        changeChartData();\n    }, [selectedOptions, timeRangeOption, timeRangeSet]);\n\n    useEffect(()=>{\n        const fetchData = async () => {\n            try {\n                const {data} = await axios.get(`http://localhost:8080/get-data/${id}`);\n                data.detail['lh_start_time'] = new Date(data.detail['lh_start_time']);\n                data.detail['lh_end_time'] = new Date(data.detail['lh_end_time']);\n                setDetail(data.detail);\n                setDataSrc(data.data);\n                setLoaded(true);\n                setDateRange({\n                    minDate: new Date(data.data[0].time),\n                    maxDate: new Date(data.data[data.data.length-1].time)\n                });\n                setStartDate(new Date(data.data[0].time));\n                setEndDate(new Date(data.data[data.data.length-1].time));\n            }catch(err){\n                console.error(err)\n            }\n        }\n        if(dataSrc.length < 1){\n            fetchData();\n        }\n    },[id, dataSrc])\n    \n    const checkCheckedBox = (value:string):boolean => {\n        return selectedOptions.includes(value);\n    }\n\n    const onCheck = (param: any) => {\n        const {value}:{value:string} = param.target;\n        const index = selectedOptions.indexOf(value);\n        if(index > -1){\n            const newList = selectedOptions.filter((val)=>val !== value);\n            setSelectedOptions(newList)\n        }else{\n            setSelectedOptions([...selectedOptions,value]);\n        }\n    }\n\n    return (\n        <>\n        {console.log(chartDataAmp)}\n        <Card className=\"mx-5\">\n            <Card.Body>\n            { loaded ?\n                <Row>\n                    <Col sm=\"12\" md=\"9\">\n                        <Row>\n                        {\n                            chartDataVolt && \n                            chartDataVolt.data.datasets &&\n                            chartDataVolt.data.datasets.length > 0 ?\n                                <Line data={chartDataVolt.data} options={chartDataVolt.options}\n                                ></Line>\n                            :\n                            <></>\n                        }   \n                        </Row>\n                        <Row>\n                        {\n                            chartDataAmp && \n                            chartDataAmp.data.datasets &&\n                            chartDataAmp.data.datasets.length > 0 ?\n                                <Line data={chartDataAmp.data} options={chartDataAmp.options}\n                                ></Line>\n                            :\n                            <></>\n                        }   \n                        </Row>\n                        <Row>\n                        {\n                            chartDataPwr && \n                            chartDataPwr.data.datasets &&\n                            chartDataPwr.data.datasets.length > 0 ?\n                                <Line data={chartDataPwr.data} options={chartDataPwr.options}\n                                ></Line>\n                            :\n                            <></>\n                        }   \n                        </Row>\n                    </Col>\n                    <Col sm=\"12\" md=\"3\">\n                        <Row>\n                            <Col className=\"m-0 p-0\">\n                                <Card>\n                                <div className=\"logging-header\">Logging Detail</div>\n                                    <Card.Body>\n                                        <Row>\n                                            <Col>\n                                                <Row><h5>{detail.lh_name}</h5></Row>\n                                                <Row className=\"flex justify-content-between\">\n                                                    Start : {detail.lh_start_time.toUTCString()}\n                                                </Row>\n                                                <Row className=\"flex justify-content-between\">\n                                                    End : {detail.lh_end_time.toUTCString()}\n                                                </Row>\n                                                <Row className=\"mt-1 flex justify-content-between\">\n                                                    Interval : {detail.lh_interval} seconds\n                                                </Row>\n                                                <Row className=\"flex justify-content-between\">\n                                                    Duration : {detail.lh_duration} minutes\n                                                </Row>\n                                            </Col>\n                                        </Row>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col className=\"m-0 p-0\">\n                                <Card>\n                                <div className=\"logging-header\">\n                                    Left Scale Options\n                                </div>\n                                    <Tab.Container defaultActiveKey=\"voltTab\">\n                                        <Card.Header>\n                                            <Col className=\"p-0\">\n                                                <Nav variant=\"pills\" className=\"flex-row\">\n                                                    <Nav.Item>\n                                                        <Nav.Link\n                                                            eventKey=\"voltTab\">\n                                                            Volt (V)\n                                                        </Nav.Link>\n                                                    </Nav.Item>\n                                                    <Nav.Item>\n                                                        <Nav.Link \n                                                            eventKey=\"currTab\">\n                                                            Curr (A)\n                                                        </Nav.Link>\n                                                    </Nav.Item>\n                                                    <Nav.Item>\n                                                        <Nav.Link \n                                                            eventKey=\"pwrTab\">\n                                                            Active Power (Wh)\n                                                        </Nav.Link>\n                                                    </Nav.Item>\n                                                    <Nav.Item>\n                                                        <Nav.Link \n                                                            eventKey=\"freqTab\">\n                                                            Freq (Hz)\n                                                        </Nav.Link>\n                                                    </Nav.Item>\n                                                </Nav>\n                                            </Col>\n                                        </Card.Header>\n                                        <Card.Body>\n                                            <Tab.Content className=\"w-100\">\n                                                <Tab.Pane eventKey=\"voltTab\">\n                                                    <Row>\n                                                        <Col sm=\"6\">\n                                                            <Form.Check \n                                                                type=\"checkbox\"\n                                                                id=\"volt_l1\"\n                                                                className=\"mb-1\"\n                                                                checked={checkCheckedBox('volt_l1')}\n                                                                value=\"volt_l1\"\n                                                                onChange={onCheck}\n                                                                label=\"L1N (V)\"\n                                                            />\n                                                            <Form.Check \n                                                                type=\"checkbox\"\n                                                                id=\"volt_l2\"\n                                                                checked={checkCheckedBox('volt_l2')}\n                                                                value=\"volt_l2\"\n                                                                className=\"mb-1\"\n                                                                onChange={onCheck}\n                                                                label=\"L2N (V)\"\n                                                            />\n                                                            <Form.Check \n                                                                type=\"checkbox\"\n                                                                id=\"volt_l3\"\n                                                                checked={checkCheckedBox('volt_l3')}\n                                                                value=\"volt_l3\"\n                                                                onChange={onCheck}\n                                                                label=\"L3N (V)\"\n                                                            />\n                                                        </Col>\n                                                        <Col sm=\"6\">\n                                                            <Form.Check \n                                                                type=\"checkbox\"\n                                                                id=\"l1v\"\n                                                                disabled\n                                                                checked={checkCheckedBox('x')}\n                                                                value=\"l1v\"\n                                                                onChange={onCheck}\n                                                                label=\"Min/Max\"\n                                                            />\n                                                        </Col>\n                                                    </Row>\n                                                </Tab.Pane>\n                                                <Tab.Pane eventKey=\"currTab\">\n                                                    <Row>\n                                                    <Col sm=\"6\">\n                                                    <Form.Check \n                                                                type=\"checkbox\"\n                                                                id=\"curr_l1\"\n                                                                className=\"mb-1\"\n                                                                checked={checkCheckedBox('curr_l1')}\n                                                                value=\"curr_l1\"\n                                                                onChange={onCheck}\n                                                                label=\"L1N (A)\"\n                                                            />\n                                                            <Form.Check \n                                                                type=\"checkbox\"\n                                                                id=\"curr_l2\"\n                                                                checked={checkCheckedBox('curr_l2')}\n                                                                value=\"curr_l2\"\n                                                                className=\"mb-1\"\n                                                                onChange={onCheck}\n                                                                label=\"L2N (A)\"\n                                                            />\n                                                            <Form.Check \n                                                                type=\"checkbox\"\n                                                                id=\"curr_l3\"\n                                                                checked={checkCheckedBox('curr_l3')}\n                                                                value=\"curr_l3\"\n                                                                onChange={onCheck}\n                                                                label=\"L3N (A)\"\n                                                            />\n                                                    </Col>\n                                                    </Row>\n                                                </Tab.Pane>\n                                                <Tab.Pane eventKey=\"pwrTab\">\n                                                    <Row>\n                                                    <Col sm=\"6\">\n                                                    <Form.Check \n                                                                type=\"checkbox\"\n                                                                id=\"act_pwr_l1\"\n                                                                className=\"mb-1\"\n                                                                checked={checkCheckedBox('act_pwr_l1')}\n                                                                value=\"act_pwr_l1\"\n                                                                onChange={onCheck}\n                                                                label=\"L1N (W)\"\n                                                            />\n                                                            <Form.Check \n                                                                type=\"checkbox\"\n                                                                id=\"act_pwr_l2\"\n                                                                checked={checkCheckedBox('act_pwr_l2')}\n                                                                value=\"act_pwr_l2\"\n                                                                className=\"mb-1\"\n                                                                onChange={onCheck}\n                                                                label=\"L2N (W)\"\n                                                            />\n                                                            <Form.Check \n                                                                type=\"checkbox\"\n                                                                id=\"act_pwr_l3\"\n                                                                checked={checkCheckedBox('act_pwr_l3')}\n                                                                value=\"act_pwr_l3\"\n                                                                onChange={onCheck}\n                                                                label=\"L3N (W)\"\n                                                            />\n                                                    </Col>\n                                                    </Row>\n                                                </Tab.Pane>\n                                                <Tab.Pane eventKey=\"freqTab\">\n                                                    <Row>\n                                                        <Col sm=\"6\">\n                                                            <Form.Check \n                                                                    type=\"checkbox\"\n                                                                    id=\"freq\"\n                                                                    className=\"mb-1\"\n                                                                    checked={checkCheckedBox('freq')}\n                                                                    value=\"freq\"\n                                                                    onChange={onCheck}\n                                                                    label=\"Freq (Hz)\"\n                                                                />\n                                                        </Col>\n                                                    </Row>\n                                                </Tab.Pane>\n                                            </Tab.Content>\n                                        </Card.Body>\n                                    </Tab.Container>\n                                </Card>\n                            </Col>\n                        </Row>\n                        {/* <Row>\n                            <Col className=\"m-0 p-0\">\n                                <Card>\n                                <div className=\"logging-header\">Right Scale Options</div>\n                                    <Tab.Container defaultActiveKey=\"vTHDTab\">\n                                        <Card.Header>\n                                            <Col className=\"p-0\">\n                                                <Nav variant=\"pills\" className=\"flex-row\">\n                                                    <Nav.Item>\n                                                        <Nav.Link eventKey=\"vTHDTab\">V THD [%]</Nav.Link>\n                                                    </Nav.Item>\n                                                    <Nav.Item>\n                                                        <Nav.Link eventKey=\"aTHDTab\">A THD [%]</Nav.Link>\n                                                    </Nav.Item>\n                                                </Nav>\n                                            </Col>\n                                        </Card.Header>\n                                        <Card.Body>\n                                            <Tab.Content className=\"w-100\">\n                                                <Tab.Pane eventKey=\"vTHDTab\">\n                                                    <Row>\n                                                        <Col sm=\"6\">\n                                                            <Form.Check \n                                                                type=\"checkbox\"\n                                                                id=\"volt_thd_l1\"\n                                                                className=\"mb-1\"\n                                                                checked={checkCheckedBox('volt_thd_l1')}\n                                                                value=\"volt_thd_l1\"\n                                                                onChange={onCheck}\n                                                                label=\"L1N (%)\"\n                                                            />\n                                                            <Form.Check \n                                                                type=\"checkbox\"\n                                                                id=\"volt_thd_l2\"\n                                                                checked={checkCheckedBox('volt_thd_l2')}\n                                                                value=\"volt_thd_l2\"\n                                                                className=\"mb-1\"\n                                                                onChange={onCheck}\n                                                                label=\"L2N (%)\"\n                                                            />\n                                                            <Form.Check \n                                                                type=\"checkbox\"\n                                                                id=\"volt_thd_l3\"\n                                                                checked={checkCheckedBox('volt_thd_l3')}\n                                                                value=\"volt_thd_l3\"\n                                                                onChange={onCheck}\n                                                                label=\"L3N (%)\"\n                                                            />\n                                                        </Col>\n                                                        <Col sm=\"6\">\n                                                            <Form.Check \n                                                                type=\"checkbox\"\n                                                                id=\"l1v\"\n                                                                disabled\n                                                                checked={false}\n                                                                value=\"l1v\"\n                                                                onChange={onCheck}\n                                                                label=\"Min/Max\"\n                                                            />\n                                                        </Col>\n                                                    </Row>\n                                                </Tab.Pane>\n                                                <Tab.Pane eventKey=\"aTHDTab\">\n                                                    <Row>\n                                                    <Col sm=\"6\">\n                                                        <Form.Check \n                                                            type=\"checkbox\"\n                                                            id=\"curr_thd_l1\"\n                                                            className=\"mb-1\"\n                                                            checked={checkCheckedBox('curr_thd_l1')}\n                                                            value=\"curr_thd_l1\"\n                                                            onChange={onCheck}\n                                                            label=\"L1N (%)\"\n                                                        />\n                                                        <Form.Check \n                                                            type=\"checkbox\"\n                                                            id=\"curr_thd_l2\"\n                                                            checked={checkCheckedBox('curr_thd_l2')}\n                                                            value=\"curr_thd_l2\"\n                                                            className=\"mb-1\"\n                                                            onChange={onCheck}\n                                                            label=\"L2N (%)\"\n                                                        />\n                                                        <Form.Check \n                                                            type=\"checkbox\"\n                                                            id=\"curr_thd_l3\"\n                                                            checked={checkCheckedBox('curr_thd_l3')}\n                                                            value=\"curr_thd_l3\"\n                                                            onChange={onCheck}\n                                                            label=\"L3N (%)\"\n                                                        />\n                                                    </Col>\n                                                    <Col sm=\"6\">\n                                                    </Col>\n                                                    </Row>\n                                                </Tab.Pane>\n                                            </Tab.Content>\n                                        </Card.Body>\n                                    </Tab.Container>\n                                </Card>\n                            </Col>\n                        </Row> */}\n                        <Row>\n                            <Col className=\"m-0 p-0\">\n                                <Card>\n                                <div className=\"logging-header\">Time Range</div>\n                                    <Card.Body>\n                                        <Row>\n                                            <Col>\n                                                <Form.Check \n                                                    type=\"checkbox\"\n                                                    id=\"l1v\"\n                                                    checked={timeRangeOption}\n                                                    value=\"l1v\"\n                                                    onChange={()=>setTimeRangeOption(!timeRangeOption)}\n                                                    label=\"Set Time Range\"\n                                                />\n                                                <Row className=\"mt-2\">\n                                                    <Col sm=\"6\">\n                                                        Start Date\n                                                    <DatePicker selected={startDate} \n                                                    disabled={!timeRangeOption}\n                                                    className=\"date-time-wrapper\"\n                                                    dateFormat=\"dd/MM/yyyy h:mm a\"\n                                                    showTimeInput\n                                                    minDate={dateRange.minDate}\n                                                    maxDate={dateRange.maxDate}\n                                                    onChange={(date:Date) => setStartDate(date)} />\n                                                    </Col>\n                                                </Row>\n                                                <Row className=\"mt-2\">\n                                                    <Col sm=\"6\">\n                                                        End Date\n                                                    <DatePicker selected={endDate} \n                                                    showTimeInput\n                                                    disabled={!timeRangeOption}\n                                                    className=\"date-time-wrapper\"\n                                                    dateFormat=\"dd/MM/yyyy h:mm a\"\n                                                    minDate={dateRange.minDate}\n                                                    maxDate={dateRange.maxDate}\n                                                    onChange={(date:Date) => setEndDate(date)} />\n                                                    </Col>\n                                                </Row>\n                                                <Row className=\"mt-2\">\n                                                    <Col>\n                                                        <Button disabled={!timeRangeOption}\n                                                        onClick={()=>setTimeRangeSet(!timeRangeSet)}\n                                                        size=\"sm\">Set</Button>\n                                                    </Col>\n                                                </Row>\n                                            </Col>\n                                        </Row>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col className=\"m-0 p-0\">\n                                <Card>\n                                <div className=\"logging-header\">Download Data</div>\n                                    <Card.Body>\n                                        <Row>\n                                            <Col>\n                                                <CSVLink className=\"btn btn-primary\" data={dataSrc} filename={`${id}_${detail.lh_name}.npi`}>Download</CSVLink>\n                                            </Col>\n                                        </Row>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n            : <Row className=\"justify-content-center align-items-center\" >\n                <Loader\n                type=\"ThreeDots\"\n                color=\"#00BFFF\"\n                height={100}\n                width={100}\n                timeout={3000} //3 secs\n                />\n            </Row>\n                    }\n            </Card.Body>\n        </Card>\n         </>\n    )\n}",["104","105"],"/Users/macbook/Desktop/project/neutron/web/src/components/Header.tsx",[],"/Users/macbook/Desktop/project/neutron/web/src/store/reducers/meter.ts",[],"/Users/macbook/Desktop/project/neutron/web/src/layouts/AppLayout.tsx",[],["106","107"],"/Users/macbook/Desktop/project/neutron/web/src/store/reducers/settings.ts",[],"/Users/macbook/Desktop/project/neutron/web/src/App.tsx",["108"],"/Users/macbook/Desktop/project/neutron/web/src/views/Meter.tsx",[],"/Users/macbook/Desktop/project/neutron/web/src/utils/meterUnit.ts",[],["109","110"],"/Users/macbook/Desktop/project/neutron/web/src/views/Logging.tsx",["111","112"],"/Users/macbook/Desktop/project/neutron/web/src/views/Power.tsx",[],"/Users/macbook/Desktop/project/neutron/web/src/views/Home.tsx",[],"/Users/macbook/Desktop/project/neutron/web/src/store/history.ts",[],"/Users/macbook/Desktop/project/neutron/web/src/views/Settings.tsx",[],"/Users/macbook/Desktop/project/neutron/web/src/utils/constants.ts",[],"/Users/macbook/Desktop/project/neutron/web/src/components/PhasorDiagram.tsx",[],"/Users/macbook/Desktop/project/neutron/web/src/store/middleware.ts",[],"/Users/macbook/Desktop/project/neutron/web/src/utils/convertDate.ts",[],"/Users/macbook/Desktop/project/neutron/web/src/components/UnitContainer.tsx",[],"/Users/macbook/Desktop/project/neutron/web/src/utils/drawPhasorLine.ts",[],{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"113","replacedBy":"117"},{"ruleId":"115","replacedBy":"118"},{"ruleId":"113","replacedBy":"119"},{"ruleId":"115","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":259,"column":8,"nodeType":"123","endLine":259,"endColumn":56,"suggestions":"124"},{"ruleId":"113","replacedBy":"125"},{"ruleId":"115","replacedBy":"126"},{"ruleId":"113","replacedBy":"127"},{"ruleId":"115","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":12,"column":8,"nodeType":"131","messageId":"132","endLine":12,"endColumn":14},{"ruleId":"113","replacedBy":"133"},{"ruleId":"115","replacedBy":"134"},{"ruleId":"129","severity":1,"message":"135","line":14,"column":21,"nodeType":"131","messageId":"132","endLine":14,"endColumn":31},{"ruleId":"129","severity":1,"message":"136","line":78,"column":11,"nodeType":"131","messageId":"132","endLine":78,"endColumn":20},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],["137"],["138"],["137"],["138"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dataSrc', 'endDate', and 'startDate'. Either include them or remove the dependency array.","ArrayExpression",["139"],["137"],["138"],["137"],["138"],"@typescript-eslint/no-unused-vars","'Report' is defined but never used.","Identifier","unusedVar",["137"],["138"],"'setCsvData' is assigned a value but never used.","'fetchData' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"140","fix":"141"},"Update the dependencies array to be: [dataSrc, endDate, selectedOptions, startDate, timeRangeOption, timeRangeSet]",{"range":"142","text":"143"},[9984,10032],"[dataSrc, endDate, selectedOptions, startDate, timeRangeOption, timeRangeSet]"]